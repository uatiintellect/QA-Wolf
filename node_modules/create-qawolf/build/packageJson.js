"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.installDependencies = exports.addDevDependencies = exports.readPackageJson = exports.getPackageJsonPath = void 0;
const tslib_1 = require("tslib");
const child_process_1 = require("child_process");
const debug_1 = tslib_1.__importDefault(require("debug"));
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const selfPkg = require('../package.json');
const debug = debug_1.default('create-qawolf:packageJson');
const defaultPackages = {
    jest: selfPkg.devDependencies['jest'],
    playwright: selfPkg.createDevDependencies['playwright'],
    qawolf: selfPkg.createDevDependencies['qawolf'],
};
const typeScriptPackages = Object.assign(Object.assign({}, defaultPackages), { '@types/debug': selfPkg.devDependencies['@types/debug'], '@types/jest': selfPkg.devDependencies['@types/jest'], '@types/node': selfPkg.devDependencies['@types/node'], 'ts-jest': selfPkg.devDependencies['ts-jest'] });
exports.getPackageJsonPath = () => path_1.join(process.cwd(), 'package.json');
exports.readPackageJson = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    try {
        const path = exports.getPackageJsonPath();
        const packageJson = yield fs_extra_1.readFile(path, 'utf8');
        return JSON.parse(packageJson);
    }
    catch (error) {
        debug('cannot read package.json %s', error.message);
        throw new Error('cannot read package.json');
    }
});
exports.addDevDependencies = (useTypeScript) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const packageJson = yield exports.readPackageJson();
    const dependencies = packageJson.dependencies || {};
    const packages = Object.assign({}, (useTypeScript ? typeScriptPackages : defaultPackages));
    const isCreateReactApp = dependencies['react-scripts'];
    if (isCreateReactApp) {
        delete packages['jest'];
    }
    const devDependencies = packageJson.devDependencies || {};
    Object.keys(packages).forEach((name) => {
        const version = packages[name];
        devDependencies[name] = version;
    });
    const sortedDevDependencies = {};
    Object.keys(devDependencies)
        .sort((k1, k2) => {
        if (k1 < k2)
            return -1;
        if (k1 > k2)
            return +1;
        return 0;
    })
        .forEach((key) => (sortedDevDependencies[key] = devDependencies[key]));
    packageJson.devDependencies = sortedDevDependencies;
    const path = exports.getPackageJsonPath();
    debug('write updated package.json to %s', path);
    yield fs_extra_1.writeFile(path, JSON.stringify(packageJson, null, 2) + '\n', 'utf8');
    return packages;
});
exports.installDependencies = (useYarn = false) => {
    child_process_1.execSync(useYarn ? 'yarn' : 'npm install', { stdio: 'inherit' });
};
//# sourceMappingURL=packageJson.js.map