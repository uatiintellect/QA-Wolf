"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptGithubActions = exports.promptOverwrite = exports.promptConfirmOverwrite = exports.promptRootDir = exports.logUseTypeScript = exports.logInstallDependencies = exports.logError = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = require("fs-extra");
const inquirer_1 = tslib_1.__importDefault(require("inquirer"));
const kleur_1 = require("kleur");
const path_1 = require("path");
const packageJson_1 = require("./packageJson");
exports.logError = (error) => {
    console.log('');
    if (error.message === 'cannot read package.json') {
        console.log(kleur_1.bold().yellow(`Cannot read ${packageJson_1.getPackageJsonPath()}`));
        console.log(kleur_1.bold().yellow(`Create a package.json with "npm init"`));
    }
    else {
        console.error(error.message);
    }
};
exports.logInstallDependencies = (packages, isYarn = false) => {
    console.log(kleur_1.cyan(`Installing dependencies`));
    Object.keys(packages).forEach((name) => {
        const version = packages[name];
        console.log(kleur_1.cyan(`${isYarn ? 'yarn add' : 'npm install --save-dev'} ${name}@${version}`));
    });
};
exports.logUseTypeScript = (useTypeScript) => {
    const message = useTypeScript
        ? 'useTypeScript: true (tsconfig.json found)'
        : 'useTypeScript: false (tsconfig.json not found)';
    console.log(kleur_1.cyan(message));
};
exports.promptRootDir = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    console.log('');
    const { rootDir } = yield inquirer_1.default.prompt({
        default: '.qawolf',
        message: 'rootDir: Directory to create tests in',
        name: 'rootDir',
        type: 'input',
    });
    return rootDir;
});
exports.promptConfirmOverwrite = (path) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const answers = yield inquirer_1.default.prompt([
        {
            default: false,
            message: `"${path}" already exists, overwrite it?`,
            name: 'overwrite',
            type: 'confirm',
        },
    ]);
    return answers.overwrite;
});
exports.promptOverwrite = (path) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const exists = yield fs_extra_1.pathExists(path);
    if (!exists)
        return true;
    return exports.promptConfirmOverwrite(path);
});
exports.promptGithubActions = () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    const answers = yield inquirer_1.default.prompt([
        {
            default: false,
            message: `Set up CI with GitHub Actions?`,
            name: 'setup',
            type: 'confirm',
        },
    ]);
    if (!answers.setup)
        return;
    const outputPath = path_1.join(process.cwd(), '.github/workflows/qawolf.yml');
    const shouldWrite = yield exports.promptOverwrite(outputPath);
    const template = fs_extra_1.readFileSync(path_1.resolve(__dirname, `../static/github.yml`), 'utf8');
    if (shouldWrite) {
        yield fs_extra_1.outputFile(outputPath, template, 'utf8');
        console.log(`Saved GitHub Actions template to ${outputPath}`);
    }
});
//# sourceMappingURL=cli.js.map