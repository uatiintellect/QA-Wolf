"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextEventCollector = exports.buildFrameSelector = void 0;
const debug_1 = __importDefault(require("debug"));
const events_1 = require("events");
const config_1 = require("../config");
const attribute_1 = require("../web/attribute");
const register_1 = require("../utils/context/register");
const debug = debug_1.default('qawolf:ContextEventCollector');
exports.buildFrameSelector = async (frame, attributes) => {
    // build the frame selector if this is one frame down from the parent
    const parentFrame = frame.parentFrame();
    if (parentFrame && !parentFrame.parentFrame()) {
        const frameElement = await frame.frameElement();
        const frameSelector = await parentFrame.evaluate(({ attributes, frameElement }) => {
            const web = window.qawolf;
            return web.buildSelector({
                attributes,
                isClick: false,
                target: frameElement,
            });
        }, { attributes, frameElement });
        return frameSelector;
    }
    return undefined;
};
class ContextEventCollector extends events_1.EventEmitter {
    constructor(context) {
        super();
        this._attributes = (config_1.loadConfig().attribute || attribute_1.DEFAULT_ATTRIBUTE_LIST).split(',');
        this._context = context;
    }
    static async create(context) {
        const collector = new ContextEventCollector(context);
        await collector._emitEvents();
        return collector;
    }
    async _emitEvents() {
        if (!register_1.isRegistered(this._context)) {
            throw new Error('Use qawolf.register(context) first');
        }
        await this._context.exposeBinding('qawElementEvent', async ({ frame, page }, elementEvent) => {
            const pageIndex = page.createdIndex;
            const event = { ...elementEvent, page: pageIndex };
            debug(`emit %j`, event);
            event.frameSelector = await exports.buildFrameSelector(frame, this._attributes);
            this.emit('elementevent', event);
        });
    }
}
exports.ContextEventCollector = ContextEventCollector;
//# sourceMappingURL=ContextEventCollector.js.map