"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserBase = void 0;
const events_1 = require("events");
const download_1 = require("./download");
const events_2 = require("./events");
class BrowserBase extends events_1.EventEmitter {
    constructor(options) {
        super();
        this._downloads = new Map();
        this._defaultContext = null;
        this._startedClosing = false;
        this._options = options;
    }
    async newPage(options) {
        const context = await this.newContext(options);
        const page = await context.newPage();
        page._ownedContext = context;
        return page;
    }
    _downloadCreated(page, uuid, url, suggestedFilename) {
        const download = new download_1.Download(page, this._options.downloadsPath || '', uuid, url, suggestedFilename);
        this._downloads.set(uuid, download);
    }
    _downloadFilenameSuggested(uuid, suggestedFilename) {
        const download = this._downloads.get(uuid);
        if (!download)
            return;
        download._filenameSuggested(suggestedFilename);
    }
    _downloadFinished(uuid, error) {
        const download = this._downloads.get(uuid);
        if (!download)
            return;
        download._reportFinished(error);
        this._downloads.delete(uuid);
    }
    _didClose() {
        for (const context of this.contexts())
            context._browserClosed();
        if (this._defaultContext)
            this._defaultContext._browserClosed();
        this.emit(events_2.Events.Browser.Disconnected);
    }
    async close() {
        if (!this._startedClosing) {
            this._startedClosing = true;
            if (this._options.ownedServer) {
                await this._options.ownedServer.close();
            }
            else {
                await Promise.all(this.contexts().map(context => context.close()));
                this._disconnect();
            }
        }
        if (this.isConnected())
            await new Promise(x => this.once(events_2.Events.Browser.Disconnected, x));
    }
}
exports.BrowserBase = BrowserBase;
//# sourceMappingURL=browser.js.map