"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.envArrayToObject = exports.envObjectToArray = exports.headersArrayToObject = exports.headersObjectToArray = exports.normalizeContinueOverrides = exports.normalizeFulfillParameters = exports.normalizeFilePayloads = void 0;
const fs = require("fs");
const mime = require("mime");
const path = require("path");
const util = require("util");
const helper_1 = require("./helper");
async function normalizeFilePayloads(files) {
    let ff;
    if (!Array.isArray(files))
        ff = [files];
    else
        ff = files;
    const filePayloads = [];
    for (const item of ff) {
        if (typeof item === 'string') {
            const file = {
                name: path.basename(item),
                mimeType: mime.getType(item) || 'application/octet-stream',
                buffer: await util.promisify(fs.readFile)(item)
            };
            filePayloads.push(file);
        }
        else {
            filePayloads.push(item);
        }
    }
    return filePayloads;
}
exports.normalizeFilePayloads = normalizeFilePayloads;
async function normalizeFulfillParameters(params) {
    let body = '';
    let isBase64 = false;
    let length = 0;
    if (params.path) {
        const buffer = await util.promisify(fs.readFile)(params.path);
        body = buffer.toString('base64');
        isBase64 = true;
        length = buffer.length;
    }
    else if (helper_1.helper.isString(params.body)) {
        body = params.body;
        isBase64 = false;
        length = Buffer.byteLength(body);
    }
    else if (params.body) {
        body = params.body.toString('base64');
        isBase64 = true;
        length = params.body.length;
    }
    const headers = {};
    for (const header of Object.keys(params.headers || {}))
        headers[header.toLowerCase()] = String(params.headers[header]);
    if (params.contentType)
        headers['content-type'] = String(params.contentType);
    else if (params.path)
        headers['content-type'] = mime.getType(params.path) || 'application/octet-stream';
    if (length && !('content-length' in headers))
        headers['content-length'] = String(length);
    return {
        status: params.status || 200,
        headers: headersObjectToArray(headers),
        body,
        isBase64
    };
}
exports.normalizeFulfillParameters = normalizeFulfillParameters;
function normalizeContinueOverrides(overrides) {
    return {
        method: overrides.method,
        headers: overrides.headers ? headersObjectToArray(overrides.headers) : undefined,
        postData: helper_1.helper.isString(overrides.postData) ? Buffer.from(overrides.postData, 'utf8') : overrides.postData,
    };
}
exports.normalizeContinueOverrides = normalizeContinueOverrides;
function headersObjectToArray(headers) {
    const result = [];
    for (const name in headers) {
        if (!Object.is(headers[name], undefined)) {
            const value = headers[name];
            helper_1.assert(helper_1.helper.isString(value), `Expected value of header "${name}" to be String, but "${typeof value}" is found.`);
            result.push({ name, value });
        }
    }
    return result;
}
exports.headersObjectToArray = headersObjectToArray;
function headersArrayToObject(headers) {
    const result = {};
    for (const { name, value } of headers)
        result[name] = value;
    return result;
}
exports.headersArrayToObject = headersArrayToObject;
function envObjectToArray(env) {
    const result = [];
    for (const name in env) {
        if (!Object.is(env[name], undefined))
            result.push({ name, value: String(env[name]) });
    }
    return result;
}
exports.envObjectToArray = envObjectToArray;
function envArrayToObject(env) {
    const result = {};
    for (const { name, value } of env)
        result[name] = value;
    return result;
}
exports.envArrayToObject = envArrayToObject;
//# sourceMappingURL=converters.js.map