"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserType = void 0;
const browser_1 = require("./browser");
const browserContext_1 = require("./browserContext");
const channelOwner_1 = require("./channelOwner");
const browserServer_1 = require("./browserServer");
const converters_1 = require("../../converters");
const jsHandle_1 = require("./jsHandle");
const helper_1 = require("../../helper");
class BrowserType extends channelOwner_1.ChannelOwner {
    static from(browserType) {
        return browserType._object;
    }
    constructor(parent, type, guid, initializer) {
        super(parent, type, guid, initializer);
    }
    executablePath() {
        return this._initializer.executablePath;
    }
    name() {
        return this._initializer.name;
    }
    async launch(options = {}) {
        const logger = options.logger;
        options = { ...options, logger: undefined };
        return this._wrapApiCall('browserType.launch', async () => {
            helper_1.assert(!options.userDataDir, 'userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistentContext` instead');
            helper_1.assert(!options.port, 'Cannot specify a port without launching as a server.');
            const launchOptions = {
                ...options,
                ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
                ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
                env: options.env ? converters_1.envObjectToArray(options.env) : undefined,
                firefoxUserPrefs: options.firefoxUserPrefs ? jsHandle_1.serializeArgument(options.firefoxUserPrefs).value : undefined,
            };
            const browser = browser_1.Browser.from((await this._channel.launch(launchOptions)).browser);
            browser._logger = logger;
            return browser;
        }, logger);
    }
    async launchServer(options = {}) {
        const logger = options.logger;
        options = { ...options, logger: undefined };
        return this._wrapApiCall('browserType.launchServer', async () => {
            const launchServerOptions = {
                ...options,
                ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
                ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
                env: options.env ? converters_1.envObjectToArray(options.env) : undefined,
                firefoxUserPrefs: options.firefoxUserPrefs ? jsHandle_1.serializeArgument(options.firefoxUserPrefs).value : undefined,
            };
            return browserServer_1.BrowserServer.from((await this._channel.launchServer(launchServerOptions)).server);
        }, logger);
    }
    async launchPersistentContext(userDataDir, options = {}) {
        const logger = options.logger;
        options = { ...options, logger: undefined };
        return this._wrapApiCall('browserType.launchPersistentContext', async () => {
            const persistentOptions = {
                ...options,
                viewport: options.viewport === null ? undefined : options.viewport,
                noDefaultViewport: options.viewport === null,
                ignoreDefaultArgs: Array.isArray(options.ignoreDefaultArgs) ? options.ignoreDefaultArgs : undefined,
                ignoreAllDefaultArgs: !!options.ignoreDefaultArgs && !Array.isArray(options.ignoreDefaultArgs),
                env: options.env ? converters_1.envObjectToArray(options.env) : undefined,
                extraHTTPHeaders: options.extraHTTPHeaders ? converters_1.headersObjectToArray(options.extraHTTPHeaders) : undefined,
                userDataDir,
            };
            const result = await this._channel.launchPersistentContext(persistentOptions);
            const context = browserContext_1.BrowserContext.from(result.context);
            context._logger = logger;
            return context;
        }, logger);
    }
    async connect(options) {
        const logger = options.logger;
        options = { ...options, logger: undefined };
        return this._wrapApiCall('browserType.connect', async () => {
            const browser = browser_1.Browser.from((await this._channel.connect(options)).browser);
            browser._logger = logger;
            return browser;
        }, logger);
    }
}
exports.BrowserType = BrowserType;
//# sourceMappingURL=browserType.js.map